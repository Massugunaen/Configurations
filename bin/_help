#!/bin/env bash
function print_options {
    echo 'Help with:'
    echo '├─── git     ── useful git commands'
    echo '├─── gdb     ── useful gdb commands for memory examination'
    echo '├─── syscalls     ── basic syscalls info'
    echo '├─── jupyter-lab     ── some jupyter commands'
    echo '└─── bash-scripting     ── bash error codes'
}

function git {
    git_rm_remote='git rm --cached <file>'
    echo '   ┌ Remove object from remote repo, not local'
    echo "1. $git_rm_remote"

    git_diff_last_commit='git diff HEAD~'
    echo '   ┌ Get difference between current version and last pushed to repo commmit'
    echo "2. $git_diff_last_commit"

    git_reset_last_local_commit='git reset HEAD~1'
    echo '   ┌ Reset last local commit'
    echo "3. $git_reset_last_local_commit"

    git_pull_all_branches='git fetch --all'
    echo '   ┌ Git pull all brances'
    echo "4. $git_pull_all_branches"

    read -p 'State your choice: ' choice
    case $choice in
        1) echo -n $git_rm_remote | xclip -selection c;;
        2) echo -n $git_diff_last_commit | xclip -selection c;;
        3) echo -n $git_reset_last_local_commit | xclip -selection c;;
        4) echo -n $git_pull_all_branches | xclip -selection c;;
        *) exit 1;;
    esac
}

function gdb {
    stack_examination="x/2000xb \$esp+-500"
    echo '   ┌ Examine stack bytes'
    echo "1. (gdb) $stack_examination"

    get_info_about_process="info proc all"
    echo '   ┌ Get info about stack size'
    echo "2. (gdb) $get_info_about_process"

    read -p 'State your choice: ' choice
    case $choice in
        1) echo -n $stack_examination | xclip -selection c;;
        2) echo -n $get_info_about_process | xclip -selection c;;
        *) exit 1;;
    esac
}

function syscalls {
    echo '#define __NR_exit                 1'
    echo '#define __NR_fork                 2'
    echo '#define __NR_read                 3'
    echo '#define __NR_write                4'
    echo '#define __NR_open                 5'
    echo '#define __NR_close                6'
    echo '#define __NR_waitpid              7'
    echo '#define __NR_creat                8'
    echo '#define __NR_link                 9'
    echo '#define __NR_unlink              10'
    echo '#define __NR_execve              11'
    echo '#define __NR_chdir               12'
    echo '#define __NR_time                13'
    echo '#define __NR_mknod               14'
    echo '#define __NR_chmod               15'
    echo '#define __NR_lchown              16'
}

function jupyter-lab {
    echo "   ┌ convert jupyter notebook to html"
    echo "1. jupyter nbconvert <notebook_path> --no-input --template full"
    html_convertion='jupyter nbconvert <notebook_path> --no-input --template full'

    read -p 'State your choice: ' choice
    case $choice in
        1) echo -e $html_convertion | xclip -selection c;;
        *) exit 1;;
    esac
}

function bash-scripting {
    echo "   ┌ Error code conventions"
    echo "1. errors"
    error_codes='\n1 - catchall for general errors let "var1 = 1/0"\n2 - misuse of shell builtins, according to Bash documentation\n126 - command invoked cannot execute\n127 - "command not found"\n128 - invalid argument to exit\n128+n - fatal error signal "n"\n130 - script terminated by Control-C\n255 - exit status out of range'

    echo "   ┌ Sequence pipes in commands"
    echo "2. pipes"
    pipes='\n; - operator allows you to execute multiple commands in succession\n&& - run next command if previous command was successful\n|| - run next command if previous command was NOT successful\n'

    read -p 'State your choice: ' choice
    case $choice in
        1) echo -e $error_codes;;
        2) echo -e $pipes;;
        *) exit 1;;
    esac
}

if [[ -z $1 ]]; then
    print_options
fi

if [[ $1 ]]; then
    case $1 in
        "git") git;;
        "gdb") gdb;;
        "syscalls") syscalls;;
        "jupyter-lab") jupyter-lab;;
        "bash-scripting") bash-scripting;;
        *) print_options;;
    esac
fi
